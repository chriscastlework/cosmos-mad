namespace CosmosWizard.Web.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using CosmosWizard.Web.AutoGeneratedFiles;
    using CosmosWizard.Web.Extensions;
    using CosmosWizard.Web.Helpers;
    using CosmosWizard.Web.Models;
    using CustomLogic.Database;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;

    public class DatabaseDocumentController : Controller
    {
        private readonly DatabaseMigratorContext _context;
        private  List<string> errors { get; set; } = new List<string>();

        public DatabaseDocumentController(DatabaseMigratorContext context)
        {
            _context = context; 
        }

        public async Task<IActionResult> Index(string entityType)
        {
            var viewModel = new DatabaseDocument();
            viewModel.EntityTypes = _context.DocumentRecords.Select(c => c.EntityType).Distinct().ToList();

            if (string.IsNullOrWhiteSpace(entityType)) return View(viewModel);

            var entities = _context.DocumentRecords.Where(c => c.EntityType == entityType).ToList();

            viewModel.Entities = entities.Take(1000).ToList();
            viewModel.EntityCount = entities.Count();


            var createdClassIds = entities.Select(c => c.CreatedFilesId).Distinct().ToArray();
            viewModel.DataVersions = _context.CreatedFiles.Where(c => createdClassIds.Contains(c.Id))
                .Select(c => c.CsFiles).ToList();

            //var bestClass = _context.CreatedFiles.FirstOrDefault(c => c.Id == 21046);
            //System.IO.File.WriteAllText(@"C:\Code\Classes\Site.cs", bestClass.CsFiles);

            return View(viewModel);
        }

        public FileContentResult Export(string entityType)
        {
            var risks = GetListOfData<Risk>(entityType);

            var xlsByteArray = DataTableUtil.CreateDataTable(risks.Select(c=> new { Id = c.id }) , "Users").GetExcelBytes();

            return File(xlsByteArray, "application/octet-stream", $"{entityType}.{DateTime.Now:yyyy.MM.dd}.xlsx");
        }

        private List<T> GetListOfData<T>(string entityType)
        {
            var entities = _context.DocumentRecords.Where(c => c.EntityType == entityType).ToList();

            List<T> results = new List<T>();

            foreach (var item in entities)
            {
                try
                {
                    var newRisk = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(item.JsonDocument);
                    results.Add(newRisk);
                }
                catch (Exception e)
                {
                    errors.Add($"Id = {item.Id} Partition = {item.Partition} error message = {e.Message}");
                }
            }

            return results;
        }

        // GET: DocumentRecords/Details/5
        public async Task<IActionResult> Details(string id, string partition)
        {
            if (id == null) return NotFound();

            var documentRecord= await _context.DocumentRecords.FirstOrDefaultAsync(m => m.Id == id && m.Partition == partition);

            if (documentRecord == null) return NotFound();

            return View(documentRecord);
        }

        // GET: DocumentRecords/Create
        public IActionResult Create()
        {
            return View();
        }

        // GET: DocumentRecords/Edit/5
        public async Task<IActionResult> Edit(string id,  string partition)
        {
            if (id == null)
            {
                return NotFound();
            }

            var DocumentRecords = await _context.DocumentRecords.FindAsync(id, partition);
            if (DocumentRecords == null)
            {
                return NotFound();
            }
            return View(DocumentRecords);
        }
    }
}
